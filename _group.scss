/* ==========================================================================
   Group
   ========================================================================== */

/**
 * Create a visual connection between UI actions that belong together.
 * Must only contain `Group-item` objects as children.
 *
 * Supports by default:
 *   `Button`
 *   `FormControl`
 *
 * Example HTML:
 *
 * Only `.Button`
 *
 * <div class="Group">
 *   <div class="Group-item">
 *     <a class="Button" href="#">Dashboard</a>
 *   </div>
 *   <div class="Group-item">
 *     <a class="Button" href="#">Account</a>
 *   </div>
 *   <div class="Group-item">
 *     <a class="Button" href="#">Logout</a>
 *   </div>
 * </div>
 *
 * `.Button` with `.FormControl`
 *
 * <div class="Group">
 *   <div class="Group-item">
 *     <input class="FormControl" type="text">
 *   </div>
 *   <div class="Group-item">
 *     <a class="Button" href="#">Logout</a>
 *   </div>
 * </div>
 */

/* Variables
   ========================================================================== */

/**
 * Bits.sass components namespace
 */

$bits-components-ns: 'bits-' !default; /* 1 */

/**
 * List of supported (ie. accounted for) components inside a group.
 */

$bits-group-supported-selectors: (
  unquote(".#{$bits-components-ns}Button"),
  unquote(".#{$bits-components-ns}FormControl")
) !default;

/**
 * Default size of `Button` and `FormControl` border width.
 */

$bits-group-border-width: 1px !default;

/* Helper variables */

/**
 * Boolean indicating whether the `Button` component is supported
 */

$bits-group-has-button: index(
  $bits-group-supported-selectors,
  unquote(".#{$bits-components-ns}Button")
);

/* Component
   ========================================================================== */

/**
 * Group
 *
 * 1. Remove inter-unit whitespace that appears between `inline-block` child
 *    elements. Work for all non-monospace font-families.  If you're using a
 *    monospace base font, you will need to set the `Group` font-family to
 *   `sans-serif` and then redeclare the monospace font on the `Group-item`
 *    objects.
 * 2. Protect against WebKit bug with optimizelegibility
 * 3. Prevent wrapping across multiple lines.
 */

.#{$bits-components-ns}Group {
  display: inline-block;
  vertical-align: middle;

  letter-spacing: -0.31em; /* 1 */
  text-rendering: optimizespeed; /* 2 */
  white-space: nowrap; /* 3 */
}

/**
 * Hack to remove inter-child whitespace in Opera for Windows. All other
 * supported browsers will drop the ruleset.
 */

.opera:-o-prefocus,
.#{$bits-components-ns}Group {
  word-spacing: -0.43em;
}

/* Descendants
   ========================================================================== */

/**
 * Group item
 *
 * 1. Ensure that adjacent `Button` or `FormControl` borders slide over each
 *    other. Must match the value of the their border width.
 * 2. Provide a consistent vertical alignment and avoid vertical whitespace in
 *    the component.
 * 3. Reset the text defaults altered in `.Group`.
 * 4. Reset margin for the first item.
 */

.#{$bits-components-ns}Group-item {
  display: inline-block;
  margin-left: -$bits-group-border-width; /* 1 */
  vertical-align: top; /* 2 */

  letter-spacing: normal; /* 3 */
  text-rendering: auto; /* 3 */
  word-spacing: normal; /* 3 */

  &:first-child {
    margin-left: 0; /* 4 */
  }
}

/**
 * Ensure that interactions with a button make it sit on top of other buttons
 * in the group.
 */

@if $bits-group-has-button {
  .#{$bits-components-ns}Group-item .#{$bits-components-ns}Button {
    &:hover,
    &:focus,
    &:active,
    &.is-pressed {
      z-index: 1;
    }
  }
}

/* Component modifiers
   ========================================================================== */

/* Vertical group */

/**
 * 1. Make the item block-level.
 * 2. Ensure that adjacent `Button` or `FormControl` borders slide over each
 *    other. Must match the value of the their border width.
 * 3. Remove left margin.
 * 4. Reset margin for the first item.
 */

.#{$bits-components-ns}Group--vertical > .#{$bits-components-ns}Group-item {
  display: block; /* 1 */
  margin-top: -$bits-group-border-width; /* 2 */
  margin-left: 0; /* 3 */

  &:first-child {
    margin-top: 0; /* 4 */
  }
}

/**
 * Make all descendant buttons block-level
 */

@if $bits-group-has-button {
  .#{$bits-components-ns}Group--vertical .#{$bits-components-ns}Button {
    display: block;
    width: 100%;
  }
}

/* Misc
   ========================================================================== */

/**
 * Remove the `border-radius` on adjacent sides of `Button` or `FormControl
 * components.
 *
 * Apply to default, horizontal group.
 *
 * We can rely on these pseudo-class selectors because one of the group
 * requirements is that it only contains `Group-item` as children.
 *
 * All browsers that support `border-radius` also support `:not()`.
 */

.#{$bits-components-ns}Group:not(.Group--vertical) {
  > .#{$bits-components-ns}Group-item {
    &:not(:first-child):not(:last-child) {
      #{$bits-group-supported-selectors} {
        border-radius: 0;
      }
    }

    &:first-child:not(:only-child) {
      #{$bits-group-supported-selectors} {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
      }
    }

    &:last-child:not(:only-child) {
      #{$bits-group-supported-selectors} {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }
    }
  }
}

/**
 * Appropriate removal of `border-radius` for vertically stacked components.
 */

.#{$bits-components-ns}Group--vertical {
  > .#{$bits-components-ns}Group-item {
    &:not(:first-child):not(:last-child) {
      #{$bits-group-supported-selectors} {
        border-radius: 0;
      }
    }

    &:first-child:not(:only-child) {
      #{$bits-group-supported-selectors} {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
    }

    &:last-child:not(:only-child) {
      #{$bits-group-supported-selectors} {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }
  }
}